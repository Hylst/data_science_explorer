
import { useState, useEffect, useMemo, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Legend, LineChart, Line, Area, AreaChart } from "recharts";
import CourseHighlight from "@/components/courses/CourseHighlight";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { TrendingUp, Code, BarChart3, Zap, Award, Target, Lightbulb, Scale, CheckCircle } from "lucide-react";

/**
 * TypeScript interfaces for type safety
 */
interface LanguageData {
  name: string;
  popularity: number;
  learningCurve: number;
  jobMarket: number;
  performance: number;
  ecosystem: number;
  color: string;
  icon: string;
  category: string;
  yearCreated: number;
  creator: string;
  paradigms: string[];
  strengths: string[];
  weaknesses: string[];
  useCases: string[];
  averageSalary: string;
  marketTrend: string;
  difficulty: string;
  timeToLearn: string;
}

interface ComparisonData {
  language: string;
  icon: string;
  pros: string[];
  cons: string[];
}

type TopicKey = 'Analyse de Donn√©es' | 'Visualisation' | 'Machine Learning' | 'Base de Donn√©es';

interface UseCaseData {
  useCase: string;
  Python: number;
  R: number;
  SQL: number;
  Julia: number;
  icon: string;
  [key: string]: string | number;
}

/**
 * Enhanced Language Comparison Component with modern ES6 features
 * Provides comprehensive analysis of programming languages for data science
 */
const LanguageComparison = () => {
  const [selectedComparison, setSelectedComparison] = useState("overview");
  const [selectedLanguage, setSelectedLanguage] = useState<LanguageData | null>(null);
  const [animationStep, setAnimationStep] = useState(0);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [selectedCodeTopic, setSelectedCodeTopic] = useState<TopicKey>('Analyse de Donn√©es');

  /**
   * Comprehensive language data with enhanced metrics and details
   * Using modern ES6 object destructuring and enhanced object literals
   */
  const languageData = useMemo(() => [
    { 
      name: "Python", 
      popularity: 87, 
      learningCurve: 85, 
      jobMarket: 92, 
      performance: 68,
      ecosystem: 96,
      color: "#3776ab",
      icon: "üêç",
      category: "G√©n√©raliste",
      yearCreated: 1991,
      creator: "Guido van Rossum",
      paradigms: ["Orient√© objet", "Fonctionnel", "Proc√©dural"],
      strengths: ["Syntaxe claire", "Vaste √©cosyst√®me", "Communaut√© active", "Polyvalence"],
      weaknesses: ["Performance", "GIL (Global Interpreter Lock)", "Consommation m√©moire"],
      useCases: ["Machine Learning", "Web Development", "Automatisation", "Data Analysis"],
      averageSalary: "75000‚Ç¨",
      marketTrend: "üìà Croissance forte",
      difficulty: "Facile",
      timeToLearn: "3-6 mois"
    },
    { 
      name: "R", 
      popularity: 48, 
      learningCurve: 65, 
      jobMarket: 75, 
      performance: 58,
      ecosystem: 88,
      color: "#276dc3",
      icon: "üìä",
      category: "Statistiques",
      yearCreated: 1993,
      creator: "Ross Ihaka & Robert Gentleman",
      paradigms: ["Fonctionnel", "Orient√© objet", "Proc√©dural"],
      strengths: ["Analyses statistiques", "Visualisations", "Packages sp√©cialis√©s", "Recherche"],
      weaknesses: ["Courbe d'apprentissage", "Performance", "Syntaxe parfois complexe"],
      useCases: ["Analyses statistiques", "Bioinformatique", "Recherche", "Visualisation"],
      averageSalary: "68000‚Ç¨",
      marketTrend: "üìä Stable",
      difficulty: "Mod√©r√©",
      timeToLearn: "4-8 mois"
    },
    { 
      name: "SQL", 
      popularity: 96, 
      learningCurve: 88, 
      jobMarket: 98, 
      performance: 85,
      ecosystem: 75,
      color: "#f29111",
      icon: "üóÉÔ∏è",
      category: "Base de donn√©es",
      yearCreated: 1974,
      creator: "Donald Chamberlin & Raymond Boyce",
      paradigms: ["D√©claratif", "Relationnel"],
      strengths: ["Standard universel", "Performance", "Simplicit√©", "Omnipr√©sent"],
      weaknesses: ["Limit√© aux donn√©es", "Pas de logique complexe", "Variations entre SGBD"],
      useCases: ["Gestion de donn√©es", "Reporting", "ETL", "Analytics"],
      averageSalary: "65000‚Ç¨",
      marketTrend: "üîÑ Essentiel",
      difficulty: "Facile",
      timeToLearn: "2-4 mois"
    },
    { 
      name: "Julia", 
      popularity: 18, 
      learningCurve: 50, 
      jobMarket: 28, 
      performance: 98,
      ecosystem: 45,
      color: "#9558b2",
      icon: "‚ö°",
      category: "Performance",
      yearCreated: 2012,
      creator: "Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman",
      paradigms: ["Fonctionnel", "Orient√© objet", "Proc√©dural"],
      strengths: ["Performance native", "Syntaxe math√©matique", "Parall√©lisme", "Interop√©rabilit√©"],
      weaknesses: ["√âcosyst√®me jeune", "Communaut√© r√©duite", "Temps de compilation"],
      useCases: ["Calcul scientifique", "HPC", "Finance quantitative", "Recherche"],
      averageSalary: "82000‚Ç¨",
      marketTrend: "üöÄ √âmergent",
      difficulty: "Mod√©r√©-Difficile",
      timeToLearn: "6-12 mois"
    }
  ], []);

  /**
   * Enhanced use case data with more comprehensive scenarios
   * Using modern ES6 array methods and object destructuring
   */
  const useCaseData = useMemo((): UseCaseData[] => [
    { useCase: "D√©butant complet", Python: 9, R: 6, SQL: 8, Julia: 4, icon: "üéì" },
    { useCase: "Analyse statistique", Python: 8, R: 10, SQL: 5, Julia: 8, icon: "üìä" },
    { useCase: "Big Data", Python: 8, R: 6, SQL: 9, Julia: 7, icon: "üóÑÔ∏è" },
    { useCase: "Machine Learning", Python: 10, R: 7, SQL: 3, Julia: 8, icon: "ü§ñ" },
    { useCase: "Visualisation", Python: 8, R: 10, SQL: 2, Julia: 6, icon: "üìà" },
    { useCase: "Performance", Python: 6, R: 4, SQL: 8, Julia: 10, icon: "‚ö°" },
    { useCase: "Web Development", Python: 9, R: 2, SQL: 6, Julia: 3, icon: "üåê" },
    { useCase: "Recherche acad√©mique", Python: 8, R: 10, SQL: 4, Julia: 9, icon: "üî¨" },
    { useCase: "Finance quantitative", Python: 9, R: 8, SQL: 7, Julia: 10, icon: "üí∞" },
    { useCase: "IoT et capteurs", Python: 8, R: 3, SQL: 5, Julia: 6, icon: "üì°" }
  ], []);

  /**
   * Market trend data for visualization
   */
  const trendData = useMemo(() => [
    { year: '2020', Python: 75, R: 52, SQL: 89, Julia: 8 },
    { year: '2021', Python: 79, R: 50, SQL: 91, Julia: 12 },
    { year: '2022', Python: 83, R: 49, SQL: 93, Julia: 15 },
    { year: '2023', Python: 85, R: 48, SQL: 95, Julia: 17 },
    { year: '2024', Python: 87, R: 48, SQL: 96, Julia: 18 }
  ], []);

  /**
   * Interactive callback functions using modern ES6 features
   */
  const handleLanguageSelect = useCallback((language: LanguageData) => {
    setSelectedLanguage(language);
  }, []);

  const toggleAdvancedView = useCallback(() => {
    setShowAdvanced(prev => !prev);
  }, []);

  /**
   * Animation effect for interactive elements
   */
  useEffect(() => {
    const timer = setInterval(() => {
      setAnimationStep(prev => (prev + 1) % 4);
    }, 3000);
    return () => clearInterval(timer);
  }, []);

  // Helper function to get code examples based on topic and language
  const getCodeExample = useCallback((language: string, topic: string): string => {
    const examples: Record<string, Record<string, string>> = {
      'Analyse de Donn√©es': {
        Python: `import pandas as pd
import numpy as np

# Chargement et analyse des donn√©es
df = pd.read_csv('data.csv')
print(f"Shape: {df.shape}")
print(df.describe())

# Analyse group√©e
result = df.groupby('category').agg({
    'value': ['mean', 'std', 'count']
}).round(2)`,
        R: `library(dplyr)
library(readr)

# Chargement et analyse
df <- read_csv('data.csv')
glimpse(df)
summary(df)

# Analyse group√©e
result <- df %>%
  group_by(category) %>%
  summarise(
    mean_value = mean(value),
    sd_value = sd(value),
    count = n()
  )`,
        SQL: `-- Analyse descriptive
SELECT 
  category,
  COUNT(*) as count,
  AVG(value) as mean_value,
  STDDEV(value) as std_value,
  MIN(value) as min_value,
  MAX(value) as max_value
FROM data_table
GROUP BY category
ORDER BY mean_value DESC;`,
        Julia: `using DataFrames, CSV, Statistics

# Chargement et analyse
df = CSV.read("data.csv", DataFrame)
describe(df)

# Analyse group√©e
result = combine(groupby(df, :category),
    :value => mean => :mean_value,
    :value => std => :std_value,
    :value => length => :count
)`
      },
      'Visualisation': {
        Python: `import matplotlib.pyplot as plt
import seaborn as sns

# Configuration du style
sns.set_style("whitegrid")
plt.figure(figsize=(10, 6))

# Graphique en barres
sns.barplot(data=df, x='category', y='value')
plt.title('Distribution par Cat√©gorie')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()`,
        R: `library(ggplot2)
library(dplyr)

# Graphique avec ggplot2
df %>%
  ggplot(aes(x = category, y = value, fill = category)) +
  geom_boxplot() +
  theme_minimal() +
  labs(
    title = "Distribution par Cat√©gorie",
    x = "Cat√©gorie",
    y = "Valeur"
  ) +
  theme(axis.text.x = element_text(angle = 45))`,
        SQL: `-- Donn√©es pour visualisation
SELECT 
  category,
  value,
  NTILE(4) OVER (ORDER BY value) as quartile
FROM data_table
WHERE value IS NOT NULL
ORDER BY category, value;`,
        Julia: `using Plots, StatsPlots

# Configuration
plotlyjs()

# Graphique en bo√Ætes
boxplot(df.category, df.value,
    title="Distribution par Cat√©gorie",
    xlabel="Cat√©gorie",
    ylabel="Valeur",
    legend=false
)`
      },
      'Machine Learning': {
        Python: `from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Pr√©paration des donn√©es
X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Mod√®le
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

# Pr√©diction
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.3f}")`,
        R: `library(randomForest)
library(caret)

# Pr√©paration
set.seed(42)
trainIndex <- createDataPartition(
  df$target, p = 0.8, list = FALSE
)
train_data <- df[trainIndex, ]
test_data <- df[-trainIndex, ]

# Mod√®le Random Forest
model <- randomForest(
  target ~ ., 
  data = train_data,
  ntree = 100
)

# Pr√©diction
predictions <- predict(model, test_data)
confusionMatrix(predictions, test_data$target)`,
        SQL: `-- Feature engineering pour ML
WITH features AS (
  SELECT 
    id,
    feature1,
    feature2,
    LAG(feature1) OVER (ORDER BY date) as prev_feature1,
    AVG(feature2) OVER (
      ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) as rolling_avg_feature2,
    target
  FROM ml_data
)
SELECT * FROM features
WHERE prev_feature1 IS NOT NULL;`,
        Julia: `using MLJ, DataFrames

# Chargement du mod√®le
RandomForestClassifier = @load RandomForestClassifier pkg=DecisionTree

# Pr√©paration
train, test = partition(eachindex(y), 0.8, shuffle=true)

# Mod√®le
model = RandomForestClassifier(n_trees=100)
mach = machine(model, X, y)

# Entra√Ænement
fit!(mach, rows=train)

# Pr√©diction
y_pred = predict_mode(mach, rows=test)
accuracy = mean(y_pred .== y[test])`
      },
      'Base de Donn√©es': {
        Python: `import sqlite3
import pandas as pd

# Connexion √† la base
conn = sqlite3.connect('database.db')

# Requ√™te complexe
query = """
SELECT 
    c.name as customer_name,
    COUNT(o.id) as order_count,
    SUM(o.total) as total_spent
FROM customers c
LEFT JOIN orders o ON c.id = o.customer_id
GROUP BY c.id, c.name
HAVING COUNT(o.id) > 5
ORDER BY total_spent DESC
"""

result = pd.read_sql_query(query, conn)
print(result.head())`,
        R: `library(DBI)
library(RSQLite)

# Connexion
con <- dbConnect(SQLite(), "database.db")

# Requ√™te
query <- "
  SELECT 
    c.name as customer_name,
    COUNT(o.id) as order_count,
    SUM(o.total) as total_spent
  FROM customers c
  LEFT JOIN orders o ON c.id = o.customer_id
  GROUP BY c.id, c.name
  HAVING COUNT(o.id) > 5
  ORDER BY total_spent DESC
"

result <- dbGetQuery(con, query)
head(result)`,
        SQL: `-- Analyse avanc√©e des ventes
WITH customer_metrics AS (
  SELECT 
    customer_id,
    COUNT(*) as order_count,
    SUM(total) as total_spent,
    AVG(total) as avg_order_value,
    MAX(order_date) as last_order_date
  FROM orders
  GROUP BY customer_id
),
customer_segments AS (
  SELECT 
    *,
    CASE 
      WHEN total_spent > 1000 THEN 'VIP'
      WHEN total_spent > 500 THEN 'Regular'
      ELSE 'Occasional'
    END as segment
  FROM customer_metrics
)
SELECT 
  segment,
  COUNT(*) as customer_count,
  AVG(total_spent) as avg_spent
FROM customer_segments
GROUP BY segment;`,
        Julia: `using SQLite, DataFrames, DBInterface

# Connexion
db = SQLite.DB("database.db")

# Requ√™te
query = """
  SELECT 
    c.name as customer_name,
    COUNT(o.id) as order_count,
    SUM(o.total) as total_spent
  FROM customers c
  LEFT JOIN orders o ON c.id = o.customer_id
  GROUP BY c.id, c.name
  HAVING COUNT(o.id) > 5
  ORDER BY total_spent DESC
"""

result = DBInterface.execute(db, query) |> DataFrame
first(result, 10)`
      }
    };
    return examples[topic]?.[language] || `# Exemple non disponible pour ${language} - ${topic}`;
  }, []);

  // Helper function to get language comparison data
  const getLanguageComparison = useCallback((topic: string) => {
    const comparisons: Record<string, ComparisonData[]> = {
      'Analyse de Donn√©es': [
        {
          language: 'Python',
          icon: 'üêç',
          pros: ['Syntaxe claire', 'Pandas tr√®s puissant', 'Grande communaut√©', 'Int√©gration facile'],
          cons: ['Plus lent que Julia', 'GIL pour le parall√©lisme', 'Gestion m√©moire']
        },
        {
          language: 'R',
          icon: 'üìä',
          pros: ['Con√ßu pour les stats', 'Visualisations natives', 'Packages sp√©cialis√©s'],
          cons: ['Syntaxe parfois complexe', 'Performance limit√©e', 'Courbe d\'apprentissage']
        },
        {
          language: 'SQL',
          icon: 'üóÉÔ∏è',
          pros: ['Optimis√© pour les donn√©es', 'Standard universel', 'Performance excellente'],
          cons: ['Limit√© aux requ√™tes', 'Pas de ML natif', 'Logique proc√©durale limit√©e']
        },
        {
          language: 'Julia',
          icon: '‚ö°',
          pros: ['Performance native', 'Syntaxe math√©matique', 'Parall√©lisme int√©gr√©'],
          cons: ['√âcosyst√®me plus petit', 'Courbe d\'apprentissage', 'Moins de ressources']
        }
      ],
      'Visualisation': [
        {
          language: 'Python',
          icon: 'üêç',
          pros: ['Matplotlib/Seaborn', 'Plotly interactif', 'Int√©gration web'],
          cons: ['Configuration verbale', 'Syntaxe parfois lourde']
        },
        {
          language: 'R',
          icon: 'üìä',
          pros: ['ggplot2 puissant', 'Grammaire des graphiques', 'Qualit√© publication'],
          cons: ['Courbe d\'apprentissage ggplot', 'Performance sur gros datasets']
        },
        {
          language: 'SQL',
          icon: 'üóÉÔ∏è',
          pros: ['Agr√©gations rapides', 'Donn√©es pr√©par√©es'],
          cons: ['Pas de visualisation native', 'D√©pendant d\'outils externes']
        },
        {
          language: 'Julia',
          icon: '‚ö°',
          pros: ['Plots.jl unifi√©', 'Performance', 'Backends multiples'],
          cons: ['√âcosyst√®me en d√©veloppement', 'Moins d\'exemples']
        }
      ],
      'Machine Learning': [
        {
          language: 'Python',
          icon: 'üêç',
          pros: ['Scikit-learn', 'TensorFlow/PyTorch', '√âcosyst√®me riche'],
          cons: ['Performance pure', 'Complexit√© des d√©pendances']
        },
        {
          language: 'R',
          icon: 'üìä',
          pros: ['Packages statistiques', 'Caret unifi√©', 'Validation crois√©e'],
          cons: ['Performance limit√©e', 'Deep learning moins d√©velopp√©']
        },
        {
          language: 'SQL',
          icon: 'üóÉÔ∏è',
          pros: ['Feature engineering', 'Donn√©es √† grande √©chelle'],
          cons: ['Pas d\'algorithmes ML', 'Limit√© au preprocessing']
        },
        {
          language: 'Julia',
          icon: '‚ö°',
          pros: ['MLJ.jl moderne', 'Performance native', 'Calcul scientifique'],
          cons: ['√âcosyst√®me plus petit', 'Moins de mod√®les pr√©-entra√Æn√©s']
        }
      ],
      'Base de Donn√©es': [
        {
          language: 'Python',
          icon: 'üêç',
          pros: ['SQLAlchemy ORM', 'Pandas integration', 'Connecteurs multiples'],
          cons: ['Overhead ORM', 'Performance sur gros volumes']
        },
        {
          language: 'R',
          icon: 'üìä',
          pros: ['DBI standard', 'dbplyr pour dplyr', 'Int√©gration tidyverse'],
          cons: ['Performance limit√©e', 'Gestion m√©moire']
        },
        {
          language: 'SQL',
          icon: 'üóÉÔ∏è',
          pros: ['Langage natif', 'Performance optimale', 'Fonctionnalit√©s avanc√©es'],
          cons: ['Portabilit√© limit√©e', 'Logique m√©tier complexe']
        },
        {
          language: 'Julia',
          icon: '‚ö°',
          pros: ['Performance native', 'Parall√©lisme', 'Int√©gration C/Fortran'],
          cons: ['Drivers moins matures', '√âcosyst√®me en d√©veloppement']
        }
      ]
    };
    return comparisons[topic] || [];
  }, []);

  // Helper function to get best practices
  const getBestPractices = useCallback((topic: string): string[] => {
    const practices: Record<string, string[]> = {
      'Analyse de Donn√©es': [
        'Toujours explorer les donn√©es avant l\'analyse (shape, types, valeurs manquantes)',
        'Utiliser des noms de variables explicites et coh√©rents',
        'Documenter les transformations et hypoth√®ses',
        'Valider les r√©sultats avec des m√©thodes alternatives',
        'Sauvegarder les donn√©es interm√©diaires importantes'
      ],
      'Visualisation': [
        'Choisir le type de graphique adapt√© au message',
        'Utiliser des couleurs accessibles et coh√©rentes',
        'Ajouter des titres et l√©gendes explicites',
        '√âviter la surcharge d\'informations (principe KISS)',
        'Tester la lisibilit√© sur diff√©rents supports'
      ],
      'Machine Learning': [
        'Diviser les donn√©es (train/validation/test) avant toute analyse',
        'Standardiser/normaliser les features num√©riques',
        'G√©rer les valeurs manquantes de mani√®re coh√©rente',
        'Utiliser la validation crois√©e pour √©valuer les mod√®les',
        'Surveiller l\'overfitting avec des m√©triques appropri√©es'
      ],
      'Base de Donn√©es': [
        'Utiliser des index sur les colonnes de jointure et filtrage',
        '√âviter SELECT * en production',
        'Pr√©f√©rer les JOINs aux sous-requ√™tes quand possible',
        'Utiliser EXPLAIN pour analyser les plans d\'ex√©cution',
        'Limiter les r√©sultats avec LIMIT/TOP pour les tests'
      ]
    };
    return practices[topic] || [];
  }, []);

  const CodeComparison = ({ title, pythonCode, rCode, sqlCode }: { title: string, pythonCode: string, rCode: string, sqlCode: string }) => (
    <div className="my-6">
      <h4 className="font-semibold mb-4">{title}</h4>
      <Tabs defaultValue="python" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="python">üêç Python</TabsTrigger>
          <TabsTrigger value="r">üìä R</TabsTrigger>
          <TabsTrigger value="sql">üóÉÔ∏è SQL</TabsTrigger>
        </TabsList>
        <TabsContent value="python">
          <div className="bg-gray-900 rounded-md overflow-hidden">
            <div className="px-4 py-2 bg-blue-800 text-white text-sm">Python</div>
            <pre className="p-4 text-sm text-gray-300 overflow-x-auto"><code>{pythonCode}</code></pre>
          </div>
        </TabsContent>
        <TabsContent value="r">
          <div className="bg-gray-900 rounded-md overflow-hidden">
            <div className="px-4 py-2 bg-blue-600 text-white text-sm">R</div>
            <pre className="p-4 text-sm text-gray-300 overflow-x-auto"><code>{rCode}</code></pre>
          </div>
        </TabsContent>
        <TabsContent value="sql">
          <div className="bg-gray-900 rounded-md overflow-hidden">
            <div className="px-4 py-2 bg-amber-600 text-white text-sm">SQL</div>
            <pre className="p-4 text-sm text-gray-300 overflow-x-auto"><code>{sqlCode}</code></pre>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );

  return (
    <section id="language-comparison" className="mb-16">
      <h2 className="text-3xl font-bold mb-8">‚öîÔ∏è Bataille des Langages : Qui Choisir ?</h2>
      
      <CourseHighlight title="üé≠ Analogie : Les langages comme des super-h√©ros" type="concept">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <p className="mb-2">
              <strong>Python = Spider-Man :</strong> Polyvalent, accessible, populaire. 
              Peut faire un peu de tout, parfait pour d√©buter.
            </p>
            <p className="mb-2">
              <strong>R = Doctor Strange :</strong> Mystique mais puissant. 
              Ma√Ætre des statistiques et des sorts... euh, des analyses complexes !
            </p>
          </div>
          <div>
            <p className="mb-2">
              <strong>SQL = Captain America :</strong> Fiable, indispensable, toujours l√†. 
              Le fondement de toute √©quipe de data science.
            </p>
            <p>
              <strong>Julia = Flash :</strong> Super rapide mais moins connu. 
              Parfait quand la vitesse est cruciale.
            </p>
          </div>
        </div>
      </CourseHighlight>

      <Tabs value={selectedComparison} onValueChange={setSelectedComparison} className="space-y-6">
        <TabsList className="grid grid-cols-1 md:grid-cols-5 w-full">
          <TabsTrigger value="overview">üìä Vue d'ensemble</TabsTrigger>
          <TabsTrigger value="code-comparison">üíª Comparaison code</TabsTrigger>
          <TabsTrigger value="use-cases">üéØ Cas d'usage</TabsTrigger>
          <TabsTrigger value="decision-guide">üß≠ Guide de choix</TabsTrigger>
          <TabsTrigger value="advanced-examples">üöÄ Exemples Avanc√©s</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Enhanced Market Trends Section */}
          <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-blue-600" />
                üìà √âvolution du March√© (2020-2024)
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={trendData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="year" />
                    <YAxis domain={[0, 100]} />
                    <Tooltip formatter={(value) => [`${value}%`, 'Popularit√©']} />
                    <Line type="monotone" dataKey="Python" stroke="#3776ab" strokeWidth={3} dot={{ r: 6 }} />
                    <Line type="monotone" dataKey="SQL" stroke="#f29111" strokeWidth={3} dot={{ r: 6 }} />
                    <Line type="monotone" dataKey="R" stroke="#276dc3" strokeWidth={3} dot={{ r: 6 }} />
                    <Line type="monotone" dataKey="Julia" stroke="#9558b2" strokeWidth={3} dot={{ r: 6 }} />
                    <Legend />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-green-600" />
                  üìä M√©triques Comparatives
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={languageData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis domain={[0, 100]} />
                      <Tooltip formatter={(value) => [`${value}%`, 'Score']} />
                      <Bar dataKey="popularity" name="Popularit√©" fill="#3B82F6" />
                      <Bar dataKey="ecosystem" name="√âcosyst√®me" fill="#10B981" />
                      <Bar dataKey="jobMarket" name="Emploi" fill="#F59E0B" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="h-5 w-5 text-purple-600" />
                  üéØ Profil Radar Complet
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <RadarChart data={languageData}>
                      <PolarGrid />
                      <PolarAngleAxis dataKey="name" />
                      <PolarRadiusAxis angle={0} domain={[0, 100]} tick={false} />
                      <Radar name="Popularit√©" dataKey="popularity" stroke="#3B82F6" fill="#3B82F6" fillOpacity={0.1} />
                      <Radar name="Facilit√©" dataKey="learningCurve" stroke="#10B981" fill="#10B981" fillOpacity={0.1} />
                      <Radar name="Performance" dataKey="performance" stroke="#EF4444" fill="#EF4444" fillOpacity={0.1} />
                      <Radar name="Emploi" dataKey="jobMarket" stroke="#F59E0B" fill="#F59E0B" fillOpacity={0.1} />
                      <Legend />
                    </RadarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Interactive Language Cards with Enhanced Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {languageData.map((lang, index) => (
              <Card 
                key={lang.name} 
                className={`border-l-4 cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-105 ${
                  selectedLanguage?.name === lang.name ? 'ring-2 ring-blue-500 shadow-lg' : ''
                } ${animationStep === index ? 'animate-pulse' : ''}`}
                style={{ borderLeftColor: lang.color }}
                onClick={() => handleLanguageSelect(lang)}
              >
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-2xl">{lang.icon}</span>
                      <div>
                        <div className="font-bold">{lang.name}</div>
                        <div className="text-xs text-gray-500">{lang.category}</div>
                      </div>
                    </div>
                    <Badge style={{ backgroundColor: lang.color, color: 'white' }}>
                      {lang.popularity}%
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {/* Progress Bars for Metrics */}
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span>Facilit√© d'apprentissage</span>
                        <span className="font-semibold">{lang.learningCurve}%</span>
                      </div>
                      <Progress value={lang.learningCurve} className="h-2" />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span>March√© de l'emploi</span>
                        <span className="font-semibold">{lang.jobMarket}%</span>
                      </div>
                      <Progress value={lang.jobMarket} className="h-2" />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span>Performance</span>
                        <span className="font-semibold">{lang.performance}%</span>
                      </div>
                      <Progress value={lang.performance} className="h-2" />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between text-xs">
                        <span>√âcosyst√®me</span>
                        <span className="font-semibold">{lang.ecosystem}%</span>
                      </div>
                      <Progress value={lang.ecosystem} className="h-2" />
                    </div>

                    {/* Quick Stats */}
                    <div className="pt-2 border-t border-gray-200">
                      <div className="flex justify-between items-center text-xs">
                        <span className="text-gray-600">Salaire moyen:</span>
                        <Badge variant="outline" className="text-xs">{lang.averageSalary}</Badge>
                      </div>
                      <div className="flex justify-between items-center text-xs mt-1">
                        <span className="text-gray-600">Temps d'apprentissage:</span>
                        <span className="font-medium">{lang.timeToLearn}</span>
                      </div>
                      <div className="text-xs mt-1 text-center">
                        <span className="text-gray-600">{lang.marketTrend}</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Detailed Language Information Panel */}
          {selectedLanguage && (
            <Card className="bg-gradient-to-r from-gray-50 to-blue-50 border-blue-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-3">
                  <span className="text-3xl">{selectedLanguage.icon}</span>
                  <div>
                    <div className="text-2xl font-bold" style={{ color: selectedLanguage.color }}>
                      {selectedLanguage.name} - Analyse D√©taill√©e
                    </div>
                    <div className="text-sm text-gray-600">
                      Cr√©√© en {selectedLanguage.yearCreated} par {selectedLanguage.creator}
                    </div>
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => setSelectedLanguage(null)}
                    className="ml-auto"
                  >
                    ‚úï Fermer
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {/* Paradigms */}
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2">
                      <Code className="h-4 w-4" />
                      Paradigmes de programmation
                    </h4>
                    <div className="space-y-1">
                      {selectedLanguage.paradigms.map((paradigm, idx) => (
                        <Badge key={idx} variant="secondary" className="mr-1 mb-1">
                          {paradigm}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  {/* Strengths */}
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2 text-green-700">
                      <Award className="h-4 w-4" />
                      Points forts
                    </h4>
                    <ul className="text-sm space-y-1">
                      {selectedLanguage.strengths.map((strength, idx) => (
                        <li key={idx} className="flex items-center gap-2">
                          <span className="text-green-500">‚úì</span>
                          {strength}
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Weaknesses */}
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2 text-red-700">
                      <Lightbulb className="h-4 w-4" />
                      Points d'attention
                    </h4>
                    <ul className="text-sm space-y-1">
                      {selectedLanguage.weaknesses.map((weakness, idx) => (
                        <li key={idx} className="flex items-center gap-2">
                          <span className="text-red-500">‚ö†</span>
                          {weakness}
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Use Cases */}
                  <div className="md:col-span-2 lg:col-span-3">
                    <h4 className="font-semibold mb-2 flex items-center gap-2">
                      <Target className="h-4 w-4" />
                      Cas d'usage principaux
                    </h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                      {selectedLanguage.useCases.map((useCase, idx) => (
                        <Badge 
                          key={idx} 
                          style={{ backgroundColor: selectedLanguage.color, color: 'white' }}
                          className="justify-center py-2"
                        >
                          {useCase}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="code-comparison" className="space-y-6">
          {/* Enhanced Code Comparison */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5 text-green-600" />
                üíª Comparaison de Code Interactive
              </CardTitle>
              <div className="flex flex-wrap gap-2 mt-2">
                {['Analyse de Donn√©es', 'Visualisation', 'Machine Learning', 'Base de Donn√©es'].map((topic) => (
                  <Button 
                    key={topic}
                    variant={selectedCodeTopic === topic ? "default" : "outline"} 
                    size="sm" 
                    onClick={() => setSelectedCodeTopic(topic as TopicKey)}
                  >
                    {topic}
                  </Button>
                ))}
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Code Examples */}
                <div className="space-y-4">
                  <h4 className="font-semibold text-lg">Exemples de Code - {selectedCodeTopic}</h4>
                  
                  {/* Python Example */}
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <span className="text-xl">üêç</span>
                      <span className="font-semibold text-blue-800">Python</span>
                      <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                        Polyvalent
                      </Badge>
                    </div>
                    <pre className="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto">
                      <code>{getCodeExample('Python', selectedCodeTopic)}</code>
                    </pre>
                  </div>

                  {/* R Example */}
                  <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <span className="text-xl">üìä</span>
                      <span className="font-semibold text-purple-800">R</span>
                      <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                        Statistiques
                      </Badge>
                    </div>
                    <pre className="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto">
                      <code>{getCodeExample('R', selectedCodeTopic)}</code>
                    </pre>
                  </div>

                  {/* SQL Example */}
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <span className="text-xl">üóÉÔ∏è</span>
                      <span className="font-semibold text-orange-800">SQL</span>
                      <Badge variant="secondary" className="bg-orange-100 text-orange-800">
                        Donn√©es
                      </Badge>
                    </div>
                    <pre className="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto">
                      <code>{getCodeExample('SQL', selectedCodeTopic)}</code>
                    </pre>
                  </div>

                  {/* Julia Example */}
                  <div className="bg-violet-50 border border-violet-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-3">
                      <span className="text-xl">‚ö°</span>
                      <span className="font-semibold text-violet-800">Julia</span>
                      <Badge variant="secondary" className="bg-violet-100 text-violet-800">
                        Performance
                      </Badge>
                    </div>
                    <pre className="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto">
                      <code>{getCodeExample('Julia', selectedCodeTopic)}</code>
                    </pre>
                  </div>
                </div>

                {/* Comparison Analysis */}
                <div className="space-y-4">
                  <h4 className="font-semibold text-lg">Analyse Comparative</h4>
                  
                  {/* Performance Metrics */}
                  <Card className="bg-gradient-to-r from-gray-50 to-blue-50">
                    <CardHeader>
                      <CardTitle className="text-base flex items-center gap-2">
                        <Zap className="h-4 w-4" />
                        M√©triques de Performance
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {[
                          { lang: 'Python', speed: 7, readability: 9, ecosystem: 10, learning: 9 },
                          { lang: 'R', speed: 6, readability: 7, ecosystem: 8, learning: 7 },
                          { lang: 'SQL', speed: 9, readability: 8, ecosystem: 6, learning: 8 },
                          { lang: 'Julia', speed: 10, readability: 6, ecosystem: 5, learning: 6 }
                        ].map((metrics) => (
                          <div key={metrics.lang} className="space-y-2">
                            <div className="flex items-center gap-2">
                              <span className="font-semibold w-16">{metrics.lang}</span>
                            </div>
                            <div className="grid grid-cols-2 gap-2 text-xs">
                              <div className="flex items-center justify-between">
                                <span>Vitesse:</span>
                                <div className="flex items-center gap-1">
                                  <Progress value={metrics.speed * 10} className="w-12 h-1" />
                                  <span>{metrics.speed}/10</span>
                                </div>
                              </div>
                              <div className="flex items-center justify-between">
                                <span>Lisibilit√©:</span>
                                <div className="flex items-center gap-1">
                                  <Progress value={metrics.readability * 10} className="w-12 h-1" />
                                  <span>{metrics.readability}/10</span>
                                </div>
                              </div>
                              <div className="flex items-center justify-between">
                                <span>√âcosyst√®me:</span>
                                <div className="flex items-center gap-1">
                                  <Progress value={metrics.ecosystem * 10} className="w-12 h-1" />
                                  <span>{metrics.ecosystem}/10</span>
                                </div>
                              </div>
                              <div className="flex items-center justify-between">
                                <span>Apprentissage:</span>
                                <div className="flex items-center gap-1">
                                  <Progress value={metrics.learning * 10} className="w-12 h-1" />
                                  <span>{metrics.learning}/10</span>
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Pros and Cons */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base flex items-center gap-2">
                        <Scale className="h-4 w-4" />
                        Avantages & Inconv√©nients
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {getLanguageComparison(selectedCodeTopic).map((comparison, idx) => (
                          <div key={idx} className="border rounded-lg p-3">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="text-lg">{comparison.icon}</span>
                              <span className="font-semibold">{comparison.language}</span>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                              <div>
                                <div className="text-green-700 font-semibold mb-1">‚úÖ Avantages:</div>
                                <ul className="list-disc list-inside space-y-1 text-green-600">
                                  {comparison.pros.map((pro, proIdx) => (
                                    <li key={proIdx}>{pro}</li>
                                  ))}
                                </ul>
                              </div>
                              <div>
                                <div className="text-red-700 font-semibold mb-1">‚ùå Inconv√©nients:</div>
                                <ul className="list-disc list-inside space-y-1 text-red-600">
                                  {comparison.cons.map((con, conIdx) => (
                                    <li key={conIdx}>{con}</li>
                                  ))}
                                </ul>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Best Practices */}
                  <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
                    <CardHeader>
                      <CardTitle className="text-base flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        üí° Bonnes Pratiques
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2 text-sm">
                        {getBestPractices(selectedCodeTopic).map((practice, idx) => (
                          <div key={idx} className="flex items-start gap-2">
                            <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                            <span>{practice}</span>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advanced-examples" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-4 w-4 text-yellow-600" />
                ‚ö° Exemples Avanc√©s avec ES6+
              </CardTitle>
            </CardHeader>
            <CardContent>
              <CodeComparison 
                  title="ü§ñ Machine Learning avec syntaxe moderne"
                  pythonCode={`# Python avec syntaxe moderne
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import pandas as pd

# Chargement et pr√©paration des donn√©es (ES6-style)
data_pipeline = {
    'load': lambda file: pd.read_csv(file),
    'clean': lambda df: df.dropna(),
    'split': lambda df, target: train_test_split(
        df.drop(target, axis=1), df[target], test_size=0.2
    )
}

# Pipeline fonctionnel
df = data_pipeline['load']('data.csv')
df_clean = data_pipeline['clean'](df)
X_train, X_test, y_train, y_test = data_pipeline['split'](df_clean, 'target')

# Mod√®le avec param√®tres par d√©faut
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Pr√©dictions et √©valuation
predictions = model.predict(X_test)
print(classification_report(y_test, predictions))`}
                  rCode={`# R avec approche fonctionnelle moderne
library(randomForest)
library(dplyr)
library(purrr)

# Pipeline fonctionnel avec purrr
data_pipeline <- list(
  load = ~ read.csv(.x),
  clean = ~ .x %>% na.omit(),
  split = ~ {
    set.seed(42)
    sample_idx <- sample(nrow(.x), 0.8 * nrow(.x))
    list(train = .x[sample_idx, ], test = .x[-sample_idx, ])
  }
)

# Application du pipeline
result <- "data.csv" %>%
  data_pipeline$load() %>%
  data_pipeline$clean() %>%
  data_pipeline$split()

# Mod√®le Random Forest
model <- randomForest(
  target ~ ., 
  data = result$train,
  ntree = 100
)

# Pr√©dictions
predictions <- predict(model, result$test)
confusionMatrix(predictions, result$test$target)`}
                  sqlCode={`-- SQL moderne avec CTE et fonctions analytiques
WITH data_preparation AS (
  SELECT 
    *,
    -- Feature engineering
    CASE 
      WHEN age < 30 THEN 'young'
      WHEN age < 50 THEN 'middle'
      ELSE 'senior'
    END as age_group,
    
    -- Normalisation
    (salary - AVG(salary) OVER()) / STDDEV(salary) OVER() as salary_normalized,
    
    -- Fen√™trage pour features temporelles
    LAG(performance, 1) OVER (PARTITION BY employee_id ORDER BY date) as prev_performance
  FROM employees
  WHERE salary IS NOT NULL
),

feature_matrix AS (
  SELECT 
    employee_id,
    age_group,
    salary_normalized,
    prev_performance,
    target,
    -- Cr√©ation d'un split train/test d√©terministe
    CASE WHEN MOD(ABS(HASH(employee_id)), 10) < 8 
         THEN 'train' 
         ELSE 'test' 
    END as dataset_split
  FROM data_preparation
)

-- Statistiques pour validation
SELECT 
  dataset_split,
  COUNT(*) as count,
  AVG(CASE WHEN target = 1 THEN 1.0 ELSE 0.0 END) as target_rate
FROM feature_matrix
GROUP BY dataset_split;`}
                />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="use-cases" className="space-y-6">
          {/* Enhanced Use Cases Analysis */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5 text-blue-600" />
                üéØ Analyse Comparative par Cas d'Usage
              </CardTitle>
              <div className="flex gap-2 mt-2">
                <Button 
                  variant={showAdvanced ? "default" : "outline"} 
                  size="sm" 
                  onClick={toggleAdvancedView}
                >
                  {showAdvanced ? "Vue Simple" : "Vue Avanc√©e"}
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={useCaseData} layout="horizontal">
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" domain={[0, 10]} />
                    <YAxis dataKey="useCase" type="category" width={140} />
                    <Tooltip 
                      formatter={(value, name) => [`${value}/10`, name]}
                      labelFormatter={(label) => {
                        const useCase = useCaseData.find(item => item.useCase === label);
                        return `${useCase?.icon} ${label}`;
                      }}
                    />
                    <Bar dataKey="Python" fill="#3776ab" name="Python üêç" />
                    <Bar dataKey="R" fill="#276dc3" name="R üìä" />
                    <Bar dataKey="SQL" fill="#f29111" name="SQL üóÉÔ∏è" />
                    <Bar dataKey="Julia" fill="#9558b2" name="Julia ‚ö°" />
                    <Legend />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          {/* Interactive Use Case Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {useCaseData.map((useCase, index) => {
              const scores = [useCase.Python, useCase.R, useCase.SQL, useCase.Julia];
              const maxScore = Math.max(...scores);
              const bestLanguages = [
                { name: 'Python', score: useCase.Python, color: '#3776ab', icon: 'üêç' },
                { name: 'R', score: useCase.R, color: '#276dc3', icon: 'üìä' },
                { name: 'SQL', score: useCase.SQL, color: '#f29111', icon: 'üóÉÔ∏è' },
                { name: 'Julia', score: useCase.Julia, color: '#9558b2', icon: '‚ö°' }
              ].filter(lang => lang.score === maxScore);

              return (
                <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-lg">
                      <span className="text-2xl">{useCase.icon}</span>
                      {useCase.useCase}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {/* Best Language(s) Recommendation */}
                      <div className="bg-green-50 p-3 rounded-lg border border-green-200">
                        <div className="text-sm font-semibold text-green-800 mb-2">
                          üèÜ Recommand√© :
                        </div>
                        <div className="flex flex-wrap gap-1">
                          {bestLanguages.map((lang, idx) => (
                            <Badge 
                              key={idx}
                              style={{ backgroundColor: lang.color, color: 'white' }}
                              className="text-xs"
                            >
                              {lang.icon} {lang.name} ({lang.score}/10)
                            </Badge>
                          ))}
                        </div>
                      </div>

                      {/* Detailed Scores */}
                      <div className="space-y-2">
                        {[
                          { name: 'Python', score: useCase.Python, color: '#3776ab', icon: 'üêç' },
                          { name: 'R', score: useCase.R, color: '#276dc3', icon: 'üìä' },
                          { name: 'SQL', score: useCase.SQL, color: '#f29111', icon: 'üóÉÔ∏è' },
                          { name: 'Julia', score: useCase.Julia, color: '#9558b2', icon: '‚ö°' }
                        ].map((lang, langIdx) => (
                          <div key={langIdx} className="flex items-center justify-between">
                            <div className="flex items-center gap-2 text-sm">
                              <span>{lang.icon}</span>
                              <span>{lang.name}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Progress 
                                value={lang.score * 10} 
                                className="w-16 h-2" 
                              />
                              <span className="text-sm font-semibold w-8">{lang.score}/10</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {showAdvanced && (
            <Card className="bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-purple-600" />
                  üìä Analyse Avanc√©e des Tendances
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Area Chart for Use Case Trends */}
                  <div>
                    <h4 className="font-semibold mb-3">√âvolution des Pr√©f√©rences par Domaine</h4>
                    <div className="h-64">
                      <ResponsiveContainer width="100%" height="100%">
                        <AreaChart data={useCaseData.slice(0, 6)}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="useCase" angle={-45} textAnchor="end" height={80} />
                          <YAxis domain={[0, 10]} />
                          <Tooltip />
                          <Area type="monotone" dataKey="Python" stackId="1" stroke="#3776ab" fill="#3776ab" fillOpacity={0.6} />
                          <Area type="monotone" dataKey="R" stackId="1" stroke="#276dc3" fill="#276dc3" fillOpacity={0.6} />
                          <Area type="monotone" dataKey="SQL" stackId="1" stroke="#f29111" fill="#f29111" fillOpacity={0.6} />
                          <Area type="monotone" dataKey="Julia" stackId="1" stroke="#9558b2" fill="#9558b2" fillOpacity={0.6} />
                        </AreaChart>
                      </ResponsiveContainer>
                    </div>
                  </div>

                  {/* Statistics Summary */}
                  <div>
                    <h4 className="font-semibold mb-3">Statistiques Globales</h4>
                    <div className="space-y-4">
                      {[
                        { name: 'Python', color: '#3776ab', icon: 'üêç' },
                        { name: 'R', color: '#276dc3', icon: 'üìä' },
                        { name: 'SQL', color: '#f29111', icon: 'üóÉÔ∏è' },
                        { name: 'Julia', color: '#9558b2', icon: '‚ö°' }
                      ].map((lang) => {
                        const scores = useCaseData.map(useCase => Number(useCase[lang.name]));
                        const avgScore = (scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(1);
                        const maxScore = Math.max(...scores);
                        const minScore = Math.min(...scores);
                        const dominantCases = useCaseData.filter(useCase => 
                          useCase[lang.name] === Math.max(useCase.Python, useCase.R, useCase.SQL, useCase.Julia)
                        ).length;

                        return (
                          <div key={lang.name} className="bg-white p-3 rounded-lg border">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="text-xl">{lang.icon}</span>
                              <span className="font-semibold" style={{ color: lang.color }}>{lang.name}</span>
                            </div>
                            <div className="grid grid-cols-2 gap-2 text-sm">
                              <div>Score moyen: <span className="font-semibold">{avgScore}/10</span></div>
                              <div>Domaines domin√©s: <span className="font-semibold">{dominantCases}</span></div>
                              <div>Score max: <span className="font-semibold">{maxScore}/10</span></div>
                              <div>Score min: <span className="font-semibold">{minScore}/10</span></div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="decision-guide" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>üß≠ Guide de D√©cision Personnalis√©</CardTitle>
            </CardHeader>
            <CardContent>
              <CourseHighlight title="üéØ Questionnaire : Trouvez VOTRE langage id√©al" type="question">
                <div className="space-y-4">
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h5 className="font-semibold mb-2">1. Quel est votre niveau en programmation ?</h5>
                    <div className="text-sm space-y-1">
                      <p>‚Ä¢ <strong>D√©butant complet :</strong> Python üêç</p>
                      <p>‚Ä¢ <strong>Quelques bases :</strong> Python ou R selon votre domaine üìä</p>
                      <p>‚Ä¢ <strong>Exp√©riment√© :</strong> Julia pour la performance ‚ö°</p>
                    </div>
                  </div>

                  <div className="bg-green-50 p-4 rounded-lg">
                    <h5 className="font-semibold mb-2">2. Dans quel secteur travaillez-vous ?</h5>
                    <div className="text-sm space-y-1">
                      <p>‚Ä¢ <strong>Tech/Startup :</strong> Python + SQL üöÄ</p>
                      <p>‚Ä¢ <strong>Recherche/Acad√©mique :</strong> R + SQL üéì</p>
                      <p>‚Ä¢ <strong>Finance/Banque :</strong> Python + SQL + R üí∞</p>
                      <p>‚Ä¢ <strong>Sciences/Ing√©nierie :</strong> Julia + Python üî¨</p>
                    </div>
                  </div>

                  <div className="bg-purple-50 p-4 rounded-lg">
                    <h5 className="font-semibold mb-2">3. Quel type de projets vous int√©resse ?</h5>
                    <div className="text-sm space-y-1">
                      <p>‚Ä¢ <strong>Applications web/mobile :</strong> Python üì±</p>
                      <p>‚Ä¢ <strong>Analyses statistiques :</strong> R üìà</p>
                      <p>‚Ä¢ <strong>Machine Learning :</strong> Python ü§ñ</p>
                      <p>‚Ä¢ <strong>Big Data :</strong> SQL + Python üóÑÔ∏è</p>
                      <p>‚Ä¢ <strong>Calcul scientifique :</strong> Julia ‚ö°</p>
                    </div>
                  </div>
                </div>
              </CourseHighlight>

              <div className="mt-8">
                <h4 className="font-semibold mb-4">üõ§Ô∏è Parcours d'Apprentissage Recommand√©s</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Card className="border-l-4 border-l-blue-500">
                    <CardHeader>
                      <CardTitle className="text-blue-700">üéØ Parcours D√©butant (6 mois)</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3 text-sm">
                        <div className="flex items-center gap-2">
                          <Badge className="bg-blue-100 text-blue-800">Mois 1-2</Badge>
                          <span>Python basics + pandas</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className="bg-blue-100 text-blue-800">Mois 3-4</Badge>
                          <span>SQL + matplotlib/seaborn</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className="bg-blue-100 text-blue-800">Mois 5-6</Badge>
                          <span>scikit-learn + projet complet</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="border-l-4 border-l-purple-500">
                    <CardHeader>
                      <CardTitle className="text-purple-700">üöÄ Parcours Avanc√© (3 mois)</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3 text-sm">
                        <div className="flex items-center gap-2">
                          <Badge className="bg-purple-100 text-purple-800">Mois 1</Badge>
                          <span>Sp√©cialisation (R pour stats, Julia pour perf)</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className="bg-purple-100 text-purple-800">Mois 2</Badge>
                          <span>Frameworks avanc√©s + optimisation</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className="bg-purple-100 text-purple-800">Mois 3</Badge>
                          <span>D√©ploiement + bonnes pratiques</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>

              <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
                <h4 className="font-semibold mb-3">üí° Conseil d'Expert</h4>
                <p className="text-sm mb-3">
                  <strong>Ne tombez pas dans le pi√®ge du "langage parfait" !</strong> 
                  Les meilleurs data scientists sont polyvalents. Commencez par un langage, 
                  ma√Ætrisez-le bien, puis ajoutez les autres selon vos besoins.
                </p>
                <div className="bg-white p-3 rounded border border-blue-100">
                  <p className="text-xs">
                    <strong>R√®gle des 80/20 :</strong> 80% de votre temps sera pass√© sur un langage principal, 
                    20% sur les langages compl√©mentaires. Choisissez bien votre 80% !
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advanced-examples" className="space-y-6">
          <Card className="bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5 text-indigo-600" />
                üöÄ Exemples Avanc√©s par Langage
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-8">
              {/* Python Advanced Examples */}
              <div className="border-l-4 border-blue-500 pl-6">
                <h4 className="font-semibold text-blue-700 mb-4">üêç Python - Machine Learning Pipeline</h4>
                <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-x-auto">
                  <pre>{`# Pipeline ML complet avec validation crois√©e
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import pandas as pd

# Cr√©ation d'un pipeline automatis√©
ml_pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('classifier', RandomForestClassifier(n_estimators=100))
])

# Validation crois√©e avec m√©triques
scores = cross_val_score(ml_pipeline, X_train, y_train, 
                        cv=5, scoring='accuracy')
print(f"Pr√©cision moyenne: {scores.mean():.3f} (+/- {scores.std() * 2:.3f})")`}</pre>
                </div>
              </div>

              {/* R Advanced Examples */}
              <div className="border-l-4 border-purple-500 pl-6">
                <h4 className="font-semibold text-purple-700 mb-4">üìä R - Analyse Statistique Avanc√©e</h4>
                <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-x-auto">
                  <pre>{`# Mod√®le mixte avec effets al√©atoires
library(lme4)
library(ggplot2)
library(dplyr)

# Mod√®le hi√©rarchique pour donn√©es longitudinales
model <- lmer(response ~ time * treatment + (1|subject), 
              data = longitudinal_data)

# Visualisation des effets
longitudinal_data %>%
  ggplot(aes(x = time, y = response, color = treatment)) +
  geom_smooth(method = "lm", se = TRUE) +
  facet_wrap(~subject) +
  theme_minimal() +
  labs(title = "√âvolution par sujet et traitement")`}</pre>
                </div>
              </div>

              {/* SQL Advanced Examples */}
              <div className="border-l-4 border-green-500 pl-6">
                <h4 className="font-semibold text-green-700 mb-4">üóÑÔ∏è SQL - Requ√™tes Analytiques Complexes</h4>
                <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-x-auto">
                  <pre>{`-- Analyse de cohorte avec fonctions fen√™tre
WITH user_cohorts AS (
  SELECT 
    user_id,
    DATE_TRUNC('month', first_purchase_date) as cohort_month,
    DATE_TRUNC('month', purchase_date) as purchase_month
  FROM purchases p
  JOIN users u ON p.user_id = u.id
),
cohort_data AS (
  SELECT 
    cohort_month,
    purchase_month,
    COUNT(DISTINCT user_id) as users,
    EXTRACT(MONTH FROM AGE(purchase_month, cohort_month)) as period_number
  FROM user_cohorts
  GROUP BY cohort_month, purchase_month
)
SELECT 
  cohort_month,
  period_number,
  users,
  ROUND(100.0 * users / FIRST_VALUE(users) OVER (
    PARTITION BY cohort_month ORDER BY period_number
  ), 2) as retention_rate
FROM cohort_data
ORDER BY cohort_month, period_number;`}</pre>
                </div>
              </div>

              {/* JavaScript Advanced Examples */}
              <div className="border-l-4 border-yellow-500 pl-6">
                <h4 className="font-semibold text-yellow-700 mb-4">‚ö° JavaScript - Visualisation Interactive</h4>
                <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-x-auto">
                  <pre>{`// Dashboard interactif avec D3.js et observables
class DataDashboard {
  constructor(containerId) {
    this.container = d3.select(containerId);
    this.data$ = new rxjs.BehaviorSubject([]);
    this.filters$ = new rxjs.BehaviorSubject({});
    
    // Pipeline r√©actif pour les donn√©es
    this.filteredData$ = rxjs.combineLatest([
      this.data$, this.filters$
    ]).pipe(
      rxjs.operators.map(([data, filters]) => 
        this.applyFilters(data, filters)
      ),
      rxjs.operators.debounceTime(300)
    );
    
    this.setupVisualization();
  }
  
  async loadData(url) {
    const data = await d3.json(url);
    this.data$.next(data);
  }
  
  setupVisualization() {
    this.filteredData$.subscribe(data => {
      this.updateCharts(data);
    });
  }
}`}</pre>
                </div>
              </div>

              {/* Performance Comparison */}
              <div className="mt-8 p-6 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg border border-gray-200">
                <h4 className="font-semibold mb-4">‚ö° Comparaison de Performance - Traitement de 1M de lignes</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div className="text-center p-4 bg-white rounded border">
                    <div className="text-2xl font-bold text-blue-600">2.3s</div>
                    <div className="text-sm text-gray-600">Python + NumPy</div>
                  </div>
                  <div className="text-center p-4 bg-white rounded border">
                    <div className="text-2xl font-bold text-purple-600">1.8s</div>
                    <div className="text-sm text-gray-600">R + data.table</div>
                  </div>
                  <div className="text-center p-4 bg-white rounded border">
                    <div className="text-2xl font-bold text-green-600">0.9s</div>
                    <div className="text-sm text-gray-600">SQL (PostgreSQL)</div>
                  </div>
                  <div className="text-center p-4 bg-white rounded border">
                    <div className="text-2xl font-bold text-yellow-600">3.1s</div>
                    <div className="text-sm text-gray-600">JavaScript + D3</div>
                  </div>
                </div>
              </div>

              {/* Best Practices */}
              <div className="mt-6 p-6 bg-gradient-to-r from-green-50 to-teal-50 rounded-lg border border-green-200">
                <h4 className="font-semibold mb-3">üí° Bonnes Pratiques Avanc√©es</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h5 className="font-medium text-green-700 mb-2">üîß Optimisation</h5>
                    <ul className="text-sm space-y-1 text-gray-700">
                      <li>‚Ä¢ Vectorisation des op√©rations</li>
                      <li>‚Ä¢ Mise en cache intelligente</li>
                      <li>‚Ä¢ Parall√©lisation des t√¢ches</li>
                      <li>‚Ä¢ Profiling de performance</li>
                    </ul>
                  </div>
                  <div>
                    <h5 className="font-medium text-green-700 mb-2">üõ°Ô∏è Robustesse</h5>
                    <ul className="text-sm space-y-1 text-gray-700">
                      <li>‚Ä¢ Gestion d'erreurs compl√®te</li>
                      <li>‚Ä¢ Tests unitaires et d'int√©gration</li>
                      <li>‚Ä¢ Validation des donn√©es</li>
                      <li>‚Ä¢ Documentation du code</li>
                    </ul>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </section>
  );
};

export default LanguageComparison;
